/*
 * This file was generated by the Gradle "init" task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.5/userguide/building_java_projects.html in the Gradle documentation.
 */
 
import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.gradle.api.tasks.testing.logging.TestExceptionFormat

group = "today.tecktip.killbill"
version = "0.0.1-SNAPSHOT"


plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
	id("java")
	id("org.springframework.boot").version("3.2.2")
	id("io.spring.dependency-management").version("1.1.4")
    `jacoco`
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
	implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.springframework.boot:spring-boot-starter-integration")
    implementation("org.springframework.security:spring-security-core")
    implementation("org.springframework.integration:spring-integration-ip")
    implementation("com.mysql:mysql-connector-j:8.3.0")
    implementation("commons-dbutils:commons-dbutils:1.8.1")
    implementation("com.fasterxml.jackson.core:jackson-core:2.16.1")
    implementation("org.bouncycastle:bcprov-jdk18on:1.77")
    implementation("today.tecktip.killbill.common:lib")
    testImplementation("junit:junit:4.13.2")
	testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("io.rest-assured:rest-assured")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

application {
    // Define the main class for the application.
    mainClass.set("today.tecktip.killbill.backend.Application")
}

tasks {
    "run"(JavaExec::class) {
        environment("MYSQL_USER", project.properties["MYSQL_USER"])
        environment("MYSQL_HOST", project.properties["MYSQL_HOST"])
        environment("MYSQL_PASS", project.properties["MYSQL_PASS"])
        environment("MYSQL_DB", project.properties["MYSQL_DB"])
        environment("ADMIN_INIT_KEY", project.properties["ADMIN_INIT_KEY"])
        environment("KEY_EXPIRATION_SECONDS", project.properties["KEY_EXPIRATION_SECONDS"])
        environment("UDP_PORT", project.properties["UDP_PORT"])
        environment("UDP_HOST", project.properties["UDP_HOST"])
        environment("SERVER_KEY", project.properties["SERVER_KEY"])
        environment("PORT", project.properties["PORT"])
        environment("VERSION", version)
    }
    "bootRun"(JavaExec::class) {
        environment("MYSQL_USER", project.properties["MYSQL_USER"])
        environment("MYSQL_HOST", project.properties["MYSQL_HOST"])
        environment("MYSQL_PASS", project.properties["MYSQL_PASS"])
        environment("MYSQL_DB", project.properties["MYSQL_DB"])
        environment("ADMIN_INIT_KEY", project.properties["ADMIN_INIT_KEY"])
        environment("KEY_EXPIRATION_SECONDS", project.properties["KEY_EXPIRATION_SECONDS"])
        environment("UDP_PORT", project.properties["UDP_PORT"])
        environment("UDP_HOST", project.properties["UDP_HOST"])
        environment("SERVER_KEY", project.properties["SERVER_KEY"])
        environment("PORT", project.properties["PORT"])
        environment("VERSION", version)
    }
    "javadoc"(Javadoc::class) {
        source = sourceSets.main.get().allJava
    }
    "test"(Test::class) {
        environment("MYSQL_USER", project.properties["MYSQL_USER"])
        environment("MYSQL_HOST", project.properties["MYSQL_HOST"])
        environment("MYSQL_PASS", project.properties["MYSQL_PASS"])
        environment("MYSQL_DB", project.properties["MYSQL_DB"])
        environment("ADMIN_INIT_KEY", project.properties["ADMIN_INIT_KEY"])
        environment("KEY_EXPIRATION_SECONDS", project.properties["KEY_EXPIRATION_SECONDS"])
        environment("UDP_PORT", project.properties["UDP_PORT"])
        environment("UDP_HOST", project.properties["UDP_HOST"])
        environment("SERVER_KEY", project.properties["SERVER_KEY"])
        environment("PORT", project.properties["PORT"])
        environment("VERSION", version)
        testLogging { 
            events(TestLogEvent.FAILED, TestLogEvent.STANDARD_OUT, TestLogEvent.STANDARD_ERROR); 
            exceptionFormat = TestExceptionFormat.FULL 
        }
    }
}