package today.tecktip.killbill.frontend.gameserver.game.basic;

import java.time.Instant;
import java.util.ArrayList;
import java.util.List;

import today.tecktip.killbill.common.exceptions.MessageFailure;
import today.tecktip.killbill.common.gameserver.data.Coordinates;
import today.tecktip.killbill.common.gameserver.games.GameType;
import today.tecktip.killbill.common.gameserver.messages.MessageDataType;
import today.tecktip.killbill.common.maploader.directives.EntityDirective.EntityType;
import today.tecktip.killbill.common.misc.TimestampedValue;
import today.tecktip.killbill.frontend.KillBillGame;
import today.tecktip.killbill.frontend.gameserver.game.basic.commands.BasicChangeEntityStateCommand.ChangeEntityStateInvokeContext;

public class BasicLocalEntityState {
    private TimestampedValue<Coordinates> coords;

    private TimestampedValue<Integer> rotation;

    private TimestampedValue<Integer> health;

    private TimestampedValue<String> heldItemTexture;

    private TimestampedValue<Integer> state;

    private String texturePrefix;

    private final EntityType type;

    private boolean wasChanged;

    protected final int id;

    private int damage;

    private List<EntityStateFieldFilter> updatedFields;

    /**
     * Constructs a new entity state for the BASIC game type.
     */
	public BasicLocalEntityState(final int id, final EntityType type, final Coordinates spawnPoint, final int health, final String texturePrefix) {
        this.id = id;
        this.type = type;
        this.texturePrefix = texturePrefix;
        this.health = new TimestampedValue<>(health);
        coords = new TimestampedValue<>(spawnPoint);
        rotation = new TimestampedValue<>(0);
        heldItemTexture = new TimestampedValue<>("none");
        state = new TimestampedValue<>(0);
        wasChanged = false;
        damage = 0;
        updatedFields = new ArrayList<>();
	}

    /**
     * Gets the entity's current coordinates.
     * @return Coordinates
     */
    public Coordinates getCoordinates() {
        return coords.get();
    }

    /**
     * Sets the entity's current coordinates if the specified timestamp is after the current value's.
     * @param createdAt When the new value was generated by the other end
     * @param coords New coordinates
     */
    public void setCoordinates(final Instant createdAt, final Coordinates coords) {
        wasChanged = true;
        this.coords.set(createdAt, coords);
    }

    /**
     * Gets the entity's rotation.
     * @return Rotation in degrees, 0 to 359 inclusive
     */
    public int getRotation() {
        return rotation.get();
    }

    /**
     * Sets the entity's rotation if the specified timestamp is after the current value's.
     * @param createdAt When the new value was generated by the other end
     * @param rotation New rotation
     */
    public void setRotation(final Instant createdAt, final int rotation) {            
        wasChanged = true;
        this.rotation.set(createdAt, rotation);
    }

    public void setRotation(final int rotation) {
        this.rotation.set(rotation);
    }
    
    /**
     * Gets the entity's type.
     * @return entity type
     */
    public EntityType getType() {
        return type;
    }

    /**
     * Gets the entity's health.
     * @return Health
     */
    public int getHealth() {
        return health.get();
    }

    /**
     * Sets the entity's health.
     * @param color New health
     */
    public void setHealth(final int health) {
        // Going down? If so, store the damage
        if (health < this.health.get()) {
            updatedFields.add(EntityStateFieldFilter.DAMAGE);
            damage = this.health.get() - health;
        }

        this.health.set(health);
    }

    /**
     * Sets the entity's health if the specified timestamp is after the current value's.
     * @param createdAt When the new value was generated by the other end
     * @param health New health
     */
    public void setHealth(final Instant createdAt, final int health) {
        wasChanged = true;
        this.health.set(createdAt, health);
    }   

    /**
     * Gets the entity's state.
     * @return State
     */
    public int getState() {
        return state.get();
    }

    /**
     * Sets the entity's state if the specified timestamp is after the current value's.
     * @param createdAt When the new value was generated by the other end
     * @param state New state
     */
    public void setState(final Instant createdAt, final int state) {
        wasChanged = true;
        this.state.set(createdAt, state);
    }   

    /**
     * Gets the entity's held item texture.
     * @return Held texture asset name
     */
    public String getHeldItemTexture() {
        return heldItemTexture.get();
    }

    /**
     * Sets the user's held item texture if the specified timestamp is after the current value's.
     * @param createdAt When the new value was generated by the other end
     * @param heldItemTexture New item texture
     */
    public void setHeldItemTexture(final Instant createdAt, final String heldItemTexture) {
        wasChanged = true;
        this.heldItemTexture.set(createdAt, heldItemTexture);
    }

    /**
     * Gets the entity's texture prefix.
     * @return Texture asset prefix
     */
    public String getTexturePrefix() {
        return texturePrefix;
    }

    /**
     * Sets the user's texture prefix if the specified timestamp is after the current value's.
     * @param createdAt When the new value was generated by the other end
     * @param texturePrefix New texture prefix
     */
    public void setTexturePrefix(final Instant createdAt, final String texturePrefix) {
        wasChanged = true;
        this.texturePrefix = texturePrefix;
    }

    /**
     * Gets the entity's unique ID.
     * @return ID
     */
    public int getId() {
        return id;
    }

    public boolean wasUpdated() {
        return wasChanged;
    }

    public void clearUpdate() {
        wasChanged = false;
    }

    public void sync() throws MessageFailure {
        if (updatedFields.size() == 0) return;

        // Run the entity state updater
        KillBillGame.get().getUdpClient().getCommandLoader().invokeMethodFor(GameType.BASIC, MessageDataType.COMMAND_CHANGE_ENTITY_STATE)
            .run(
                KillBillGame.get().getUdpClient(),
                new ChangeEntityStateInvokeContext(this, updatedFields)
            );
        damage = 0;
        updatedFields.clear();
    }

    public int getDamage() {
        return damage;
    }

    public static enum EntityStateFieldFilter {
        COORDINATES,
        ROTATION,
        HEALTH,
        HELD_ITEM_TEXTURE,
        STATE,
        TYPE,
        DAMAGE
    }
}
